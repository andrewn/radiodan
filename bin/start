#!/usr/bin/env ruby
require 'pathname'
require 'yaml'

require 'rubygems'
require 'bundler/setup'

require 'eventmachine'
require 'em-synchrony'

ROOT = File.join(File.dirname(__FILE__), '..')

@config = YAML.load_file(File.join(ROOT, 'config.yml'))

require_relative '../lib/em_additions'
require_relative '../lib/radio'
require_relative '../lib/web_app'

EM.synchrony do
  @playlists = Radio::Playlist.new(path: File.join(ROOT, 'playlists'))
  
  @mpd = Radio::MPD.new(@config)
  @mpd.playlists = @playlists
  
  # start web interface
  Thin::Server.start WebApp, '0.0.0.0', 3000
  
  # graceful shutdown of service
  # also stops MPD
  %w{INT SIGTERM}.each do |signal|
    Signal.trap(signal) do
      EM::Synchrony.next_tick do
        @mpd.stop
        EM.stop
      end
    end
  end

  EM.error_handler do |e|
    puts "Error raised during event loop: #{e.message}"
    puts e.backtrace.join("\n")
  end
  
  EM::Synchrony.next_tick do
    # download BBC Radio playlists
    # Querystrings suggest each stream valid for 4 hours
    # dump this info into db,
    # so we don't have to run on every boot
    EM.now_and_every(hours: 3.9) do
      @playlists.download
    end
  end

  EM::Synchrony.next_tick do
    # keep MPD running on schedule
    EM.now_and_every(seconds: 1) do
      @mpd.sync
    end
  end

  EM::Synchrony.next_tick do
    # check for touched files
    @file_control = Radio::Control::File.new(@mpd)
    EM.now_and_every(seconds: 0.5) do
      @file_control.check
    end
  end
end
